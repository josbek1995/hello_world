#include <cs50.h>
#include <stdio.h>
#include <string.h>

// Max number of candidates
#define MAX 9

// preferences[i][j] is number of voters who prefer i over j
int preferences[MAX][MAX];

// locked[i][j] means i is locked in over j
bool locked[MAX][MAX];

// Each pair has a winner, loser
typedef struct
{
    int winner;
    int loser;
}
pair;

// Array of candidates
string candidates[MAX];
pair pairs[MAX * (MAX - 1) / 2];

int pair_count;
int candidate_count;

// Function prototypes
bool vote(int rank, string name, int ranks[]);
void record_preferences(int ranks[]);
void add_pairs(void);
void sort_pairs(void);
void lock_pairs(void);
void print_winner(void);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: tideman [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX)
    {
        printf("Maximum number of candidates is %i\n", MAX);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i] = argv[i + 1];
    }

    // Clear graph of locked in pairs
    for (int i = 0; i < candidate_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            locked[i][j] = false;
        }
    }

    pair_count = 0;
    int voter_count = get_int("Number of voters: ");

    // Query for votes
    for (int i = 0; i < voter_count; i++)
    {
        // ranks[i] is voter's ith preference
        int ranks[candidate_count];

        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            if (!vote(j, name, ranks))
            {
                printf("Invalid vote.\n");
                return 3;
            }
        }

        record_preferences(ranks);

        printf("\n");
    }

    add_pairs();
    sort_pairs();
    lock_pairs();
    print_winner();
    return 0;
}

// Update ranks given a new vote
bool vote(int rank, string name, int ranks[])
{
    // TODO
    for (int i = 0; i < candidate_count; i++)
    {
        if (strcmp(name, candidates[i]) == 0)
        {
            ranks[rank] = i;
            return true;
        }
    }
    return false;
}

// Update preferences given one voter's ranks
void record_preferences(int ranks[])
{
    // TODO
    for (int a = 0; a < candidate_count; a++) //here every rank is evaluated, starting from 0 this is the rank 1
    {
        int i = ranks[a];

        for (int b = a + 1; b < candidate_count; b++) 
// Here every candidate less preferred is evaluated, starting from a + 1 this is the rank 2
        {
            int j = ranks[b];                         // by this algorithm a previous candidate [i] can't be selected again when the iteration occurs
            preferences[i][j] += 1;
        }
    }
    return;
}

// Record pairs of candidates where one is preferred over the other
void add_pairs(void)
{
    // TODO
    for (int i = 0; i < candidate_count; i++) // i start from candidate[0]
    {
        for (int j = i + 1; j < candidate_count; j++) // j start from candidate[1]
        {
            if (preferences[i][j] > preferences[j][i]) // By this algorithm a previous candidate choosen [i] can't be selected again
            {
                pairs[pair_count].winner = i; //pairs[pair_count] same as pairs[0]
                pairs[pair_count].loser = j;
                pair_count += 1; //pairs[pair_acount + 1] same as pairs [0+1]
            }
            else if (preferences[i][j] < preferences[j][i])
            {
                pairs[pair_count].winner = j;
                pairs[pair_count].loser = i;
                pair_count += 1;
            }
        }
    }
    return;
}

// Sort pairs in decreasing order by strength of victory
void sort_pairs(void)
{
    // TODO
    for (int a = 0; a < pair_count; a++) // here we define the number of pairs to be position changed if it is required
    {
        for (int b = a + 1; b < pair_count; b++) //we evaluate in increasing order the other pairs 
        {
//(pair0 --> compared with pair1, pair2, pair3, etc) then (pair1---> compared with pair2, pair3, etc)
            if (preferences[pairs[b].winner][pairs[b].loser] > preferences[pairs[a].winner][pairs[a].loser]) 
// here the (VOTES) preferences of pair[0] is compared to preferences of pair[1], pair[2], etc
            {
                int temp1 = pairs[a].winner;
                int temp2 = pairs[a].loser;
                pairs[a].winner = pairs[b].winner;
                pairs[a].loser = pairs[b].loser;
                pairs[b].winner = temp1;
                pairs[b].loser = temp2;
            }
        }
    }
    return;
}


// Lock pairs into the candidate graph in order, without creating cycles
void lock_pairs(void)
{
    // TODO
    locked[pairs[0].winner][pairs[0].loser] = true; //always the first pair is true
    for (int a = 1; a < pair_count; a++) // here we evaluate every pair
    {
//here we give the "true" value to every pair in the adjacency matrix before its evaluation
        locked[pairs[a].winner][pairs[a].loser] = true; 
        
        int iteration = pairs[a].winner;                //evaluation of condorcet cycle is realized here
        for (int b = 0; b <= pair_count; b++)           //the iteration occurs until we reach the direction of the pair evaluated
        {
            if (pairs[b].loser == iteration && locked[pairs[b].winner][pairs[b].loser] == true)
            {
                iteration = pairs[b].winner;
                b = 0;                               // the faking secret is here!!! the iteration should be restarted for every pair inside the condorcet cycle
                if (pairs[a].loser == iteration) // if the pair create a cycle, it should be false
                {
                    locked[pairs[a].winner][pairs[a].loser] = false;
                }
            }
        }
    }
}

// Print the winner of the election
void print_winner(void)
{
    // TODO
    string winner;
    for (int j = 0; j < candidate_count; j++) // we must evaluate every column, so we start the iteration from j
    {
        int counter = 0;
        for (int i = 0; i < candidate_count; i++)
        {
            if (locked[i][j] == false) //here we evaluate every column searching for false on every edge.
            {
                counter += 1;
            }
            if (counter == candidate_count)
            {
                winner = candidates[j];
            }
        }
    }
    printf("%s\n", winner);
    return;
}
